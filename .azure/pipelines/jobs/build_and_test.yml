parameters:
  name: ''
  vmImage: ''

jobs:
  - job: ${{ parameters.name }}
    displayName: '${{ parameters.name }} build and test'
    pool:
      vmImage: ${{ parameters.vmImage }}
    strategy:
      matrix:
        debug-build:
          BUILD_CONFIG: Debug
        release-build:
          BUILD_CONFIG: Release
    steps:
      - task: DotNetCoreInstaller@0
        inputs:
          packageType: sdk
          version: $(SDK_VERSION)
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - bash: |
          curl -o dotnet-install.sh https://dot.net/v1/dotnet-install.sh
          mkdir dotnet
          chmod u+x ./dotnet-install.sh
          ./dotnet-install.sh --install-dir $(pwd)/dotnet -v $SDK_VERSION -c master
          ./dotnet-install.sh --install-dir $(pwd)/dotnet -v 2.1.500
          rm $(pwd)/dotnet-install.sh
          export PATH="$(pwd)/dotnet:$PATH"

          echo 'installed sdks:'
          dotnet --list-sdks
          echo "-------------------------------------------------"
        displayName: 'installing .net core sdks'
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - bash: |
          export PATH="$(pwd)/dotnet:$PATH"
          echo 'installed sdks:'
          dotnet --list-sdks
          echo "-------------------------------------------------"

          chmod u+x ./build.sh
          ./build.sh build
        displayName: build

      - bash: |
          export PATH="$(pwd)/dotnet:$PATH"
          echo 'installed sdks:'
          dotnet --list-sdks
          echo "-------------------------------------------------"

          ./build.sh test
        displayName: test

      - bash: |
          export PATH="$(pwd)/dotnet:$PATH"
          echo 'installed sdks:'
          dotnet --list-sdks
          echo "-------------------------------------------------"

          # https://github.com/tonerdo/coverlet/issues/274
          dotnet tool install -g coverlet.console --version 1.3.0
          # Workaround
          # https://github.com/Microsoft/azure-pipelines-tasks/issues/8291#issuecomment-441707116
          export PATH="$PATH:$HOME/.dotnet/tools"
          ./build.sh coverage
        displayName: code coverage
        condition: and( succeeded(), variables['CODECOV_TOKEN'], ne( variables['Agent.OS'], 'Darwin' ), eq( variables['BUILD_CONFIG'], 'Release' ) )

      - bash: |
          echo 'installed sdks:'
          dotnet --list-sdks
          echo "-------------------------------------------------"

          ./build.sh pack
        displayName: pack
        condition: and( succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['BUILD_CONFIG'], 'Release' ) )

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'

      - task: PublishBuildArtifacts@1
        condition: and( succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ), eq( variables['BUILD_CONFIG'], 'Release' ), ne( variables['Build.Reason'], 'PullRequest' ) )
        inputs:
          pathtoPublish: 'NuGet-Packed'
          artifactName: 'NuGet-Packed'
